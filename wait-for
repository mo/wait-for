#!/usr/bin/env python2

import sys
import time
import argparse
import subprocess

def run(cmd):
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, executable='/bin/bash')
    output_stdout, output_stderr = proc.communicate()
    return proc.returncode, output_stdout.strip(), output_stderr.strip()


def finished_waiting(exitcode, stdout, previous_stdout):
    inverted = getattr(args, 'not')

    # check exit code equals / not equals
    if args.exitcode != None and not inverted and exitcode == args.exitcode:
        if args.verbose:
            print "found exitcode %d" % exitcode
        return True
    if args.exitcode != None and inverted and exitcode != args.exitcode:
        if args.verbose:
            print "found exitcode other than %d" % exitcode
        return True

    # check stdout equals / not equals
    if args.stdout_equals != None and not inverted and stdout == args.stdout_equals:
        if args.verbose:
            print "found stdout equal to '%s'" % stdout
        return True
    if args.stdout_equals != None and inverted and stdout != args.stdout_equals:
        if args.verbose:
            print "found stdout not equal to '%s', stdout: '%s'" % (args.stdout_equals, stdout)
        return True

    # check stdout contains / not contains
    if args.stdout_contains != None and not inverted and args.stdout_contains in stdout:
        if args.verbose:
            print "found stdout containing '%s', stdout: '%s'" % (args.stdout_contains, stdout)
        return True
    if args.stdout_contains != None and inverted and not args.stdout_contains in stdout:
        if args.verbose:
            print "found stdout not containing '%s', stdout: '%s'" % (args.stdout_contains, stdout)
        return True

    # check stdout changed / not changed
    if args.stdout_change and not inverted and previous_stdout != None and stdout != previous_stdout:
        if args.verbose:
            print "found stdout '%s' that was different from previous stdout: '%s'" % (stdout, previous_stdout)
        return True
    if args.stdout_change and inverted and previous_stdout != None and stdout == previous_stdout:
        if args.verbose:
            print "found stdout that was identical to previous run: '%s'" % stdout
        return True

    return False


def main():
    previous_stdout = None
    while True:
        if args.verbose:
            print "running: " + args.command
        exitcode, stdout, stderr = run(args.command)
        if args.verbose:
            print "process returned %d, stdout '%s' and stderr '%s'" % (exitcode, stdout, stderr)

        if finished_waiting(exitcode, stdout, previous_stdout):
            break

        previous_stdout = stdout

        time.sleep(args.sleep)

        if args.verbose:
            sys.stdout.write('.')
            sys.stdout.flush()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument('--exitcode', type=int)
    parser.add_argument('--stdout-equals', metavar='STR', type=str)
    parser.add_argument('--stdout-contains', metavar='STR', type=str)
    parser.add_argument('--stdout-change', action='store_true')
    parser.add_argument('--not', action='store_true')

    parser.add_argument('--sleep', type=float, default=2)
    parser.add_argument('--verbose', action='store_true')

    parser.add_argument('command', metavar='COMMAND', type=str)

    args = parser.parse_args()

    stop_conditions = [
        args.exitcode,
        args.stdout_equals,
        args.stdout_contains,
        args.stdout_change
    ]
    if not any(stop_conditions):
        # By default we wait for the "args.command" to exit with exit code 0
        args.exitcode = 0

    main()
